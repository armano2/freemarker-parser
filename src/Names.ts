import { IDirectivesTypes } from './types/Tokens'

export enum NodeNames {
  Program = 'Program',
  Else = 'Else',
  Condition = 'Condition',
  Include = 'Include',
  List = 'List',
  Text = 'Text',
  Assign = 'Assign',
  Global = 'Global',
  Local = 'Local',
  Macro = 'Macro',
  MacroCall = 'MacroCall',
  Interpolation = 'Interpolation',
  Attempt = 'Attempt',
  Recover = 'Recover',
  Comment = 'Comment',
  Switch = 'Switch',
  SwitchCase = 'SwitchCase',
  SwitchDefault = 'SwitchDefault',
  Break = 'Break',

  ConditionElse = 'ConditionElse',

  // Unsupported for now
  // Function = 'Function',
    // return = 'return',
  // Flush = 'Flush',
  // Local = 'Local',
  // Lt = 'Lt',
  // Nested = 'Nested',
  // nt = 'nt',
  // recurse = 'recurse',
  // rt = 'rt',
  // setting = 'setting',
  // stop = 'stop',
  // switch = 'switch',
  //   // else = 'else',
  //   case = 'case',
  //   break = 'break',
  // t = 't',
  // visit = 'visit',
}

export enum ParamNames {
  Compound = 'Compound',
  Identifier = 'Identifier',
  MemberExpression = 'MemberExpression',
  Literal = 'Literal',
  CallExpression = 'CallExpression',
  UnaryExpression = 'UnaryExpression',
  BinaryExpression = 'BinaryExpression',
  LogicalExpression = 'LogicalExpression',
  ArrayExpression = 'ArrayExpression',
}

export const directives : IDirectivesTypes = {
  if: NodeNames.Condition,
  else: NodeNames.Else,
  elseif: NodeNames.ConditionElse,
  list: NodeNames.List,
  include: NodeNames.Include,
  assign: NodeNames.Assign,
  attempt: NodeNames.Attempt,
  // compress: 'compress',
  // escape: 'escape',
  // noescape: 'noescape',
  // fallback: 'fallback',
  // function: 'function',
  // flush: 'flush',
  global: NodeNames.Global,
  // import: 'import',
  local: NodeNames.Local,
  // lt: 'lt',
  macro: NodeNames.Macro,
  // nested: 'nested',
  // nt: 'nt',
  recover: NodeNames.Recover,
  // recurse: 'recurse',
  // return: 'return',
  // rt: 'rt',
  // setting: 'setting',
  // stop: 'stop',
  switch: NodeNames.Switch,
  case: NodeNames.SwitchCase,
  default: NodeNames.SwitchDefault,
  break: NodeNames.Break,
  // t: 't',
  // visit: 'visit',
}
